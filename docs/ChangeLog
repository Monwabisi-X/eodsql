Version 2.2-alpha
    * Another fix for NPE when selecting an empty Collection
Version 2.1
    * Selecting an empty Collection resulted in an NPE - fixed
    * Fixed a ClassNotFoundError in the ArrayWrapper when running under Java 1.5
    * byte[] is now considered a primitive type, and can be mapped to a BINARY or VARBINARY column
Version 2.1-rc1
    * Changed to HSQLDB-1.9-rc for unit testing
    * WritableDataSet fixes
    * Batch updates merged into trunk
    * Many other bug fixes
Version 2.1-beta
    * Fixed an off-by-one bug in the ConnectedDataSet.IteratorImpl
    * Added much better unit testing around DataSets
    * ArrayWrapper will now fallback to slowWrap if the database doesn't support ResultSet.setFetchDirection
    * UpdatableDataSet now properly conforms to the exected spec with regards to adding new rows
    * Many internal documentation improvements (the codebase should be easier to read now)
    * Added a short-path for creating Query objects when only one QueryFactory is registered (99% of the time)
    * CollectionWrapper has been replaced with CollectionWrapperFactory which has different Wrapper implementations
    * CollectionWrapperFactory can now construct specified Collection implementations
    * SelectionMethodImplementation.Factory has now been promoted to SelectionMethodImplementationFactory
    * Added SelectIntoMethodImplementation to handle the selection of data into an existing object
Version 2.1-alpha
    * Added in DataObjectBindingCache as a SoftReference cache for MutableColumn objects
    * Many improvements and reworkings to the JavaDocs
    * Added Call.readOnly() to have the same effect as Select.readOnly()
    * Using unknown primitives now gives better error messages
    * Invalid Query strings now have better error messages
    * Query correctly finds private fields instead of using getters
    * Performance improvements to the QueryFactoryChain
Version 2.0
    * Removed the SelectPrimitive annotation, use @Select instead
    * TransactionQueries can be constructed with a DataSource as well as a Connection.
        This has the side-effect of holding the Connection until the TransactionQuery is closed.
Version 2.0-rc1
    * Fixed a bug with the QueryTool.select not closing the Connections as expected
    * Context.close is now safer to use under JDBC drivers that throw Exceptions when
        close() is invoked on a closed resource
Version 2.0-beta2
    * ArrayWrapper now has 2 methods of building arrays
        the first works backwards through a pre-sized array (and so is much faster)
        the second is a compatibility method that works with an expanding array
    * Fixed a bug in the BaseQueryImpl class that broke the TransactionQueries
    * BaseQueryImpl will now allow a method to have more than one annotation,
        so long as only one MethodImplementationFactory can be matched to the method
    * DefaultDataObjectBinding now uses getColumnLabel instead of getColumnName, so AS should work from the SQL
    * Fixed several problems in DefaultDataObjectBinding with regards to the handling of RETURN_KEYS_FIRST_COLUMNs
    * Fixed a Connection leak in BaseQueryImpl
    * TransactionQueryImpl now sets the auto-commit of it's given Connection
    * The CallMethodImplementation.Factory now explicidly tests for a void return type before attempting to validate it
Version 2.0-beta
    ConnectedDataSet's disconnect method now caches the size to avoid SQLExceptions
    ConnectedDataSet's Iterator implementation now works as expected when the DataSet has been disconnected
    ConnectedDataSet will now throw IndexOutOfBoundsExceptions as expected in the get method
    DefaultDataObjectBindings now handle loose bindings correctly (columns were getting mixed up)
    There should be fewer NullPointerExceptions due to ResultSetWrappers not being avaible for unknown types (there will be InvalidDataTypeExceptions instead)
    QueryTool.select is now working again, and includes a new variant that uses a Connection instead of a DataSource.
    Fixed the Accessibility structure so that private / protected / package-protected methods fields and constructors can be used
    Fixed an infinite loop in the QueryFactoryChain when creating Queries were created with DataSource's
    The ArrayWrapper was broken if the ResultSet had no rows in it (failed with an Exception)
    Fixed NullPointerExceptions in the default TypeMapper implementations
    Added "char" and "Character" as default primitive types
    The Java primitive TypeMappers (short, int, long, boolean, etc.) now use valueOf instead of new
Version 2.0-alpha
    Added the ability to register/deregister QueryFactories by hand (for Java 1.5 users)
    Changed the type-map in QueryTool to an internal TypeMap class, the old method was a massive bottleneck
    Exposed much of the internal API in the spi.util package
    Moved much of the internal implementation to the "impl" package
    Reworked the API into a much more moduler structure, making it easier to extend
    All EoD Specific Exceptions now extend from EoDException
    Method implementations are no longer lazy-loaded
    DataObjectBindings are tied to a ResultSet / Class pair, meaning they only work for a single method, but they are much faster
    The Type-Map is no longer thread-safe. Any changes to it should be made /before/ any database work is done
    DataIterators are also no longer thread-safe. DataIterators would almost never have been used by multiple threads anyway.
Version 1.1
    Plenty of internal cleaning up
    Added SPI query-generators
    Added GeneratedKeys.RETURNED_KEYS_FIRST_COLUMN
    Updatable DataSet objects
    Fixed an off-by-one error in the DataSet Iterator class
    Added a complete list of the Methods supported by the different DataSet classes
Version 1.0 (2007-11-18)
    Added the QueryTool.select method for less structured / once-off queries
    Added the DataSetCache, ArrayDataSetCache and NullDataSetCache for controlling the way a DataSet caches row values
    ConnectedDataSet's don't disconnect as often anymore, but are not thread-safe
    DataSourceQueryHandler's now understand threading, and will reuse open connections if it's safe to
    The deprecated methods in QueryTool have been removed!
    Brand new tutorial!
Version 0.9 (2007-05-22)
    Query classes are now only validated once
    More detailed error messages in exceptions
    Query strings are now sanity-checked when the first implementation is requested
    @SelectPrimitive now works as expected, and can also handle basic Collections or primitives
    JDBC 4 query strings work again, as they should
    java.sql.Date; Time; and Timestamp are now known primitive-types
Version 0.8-beta (2007-03-22)
    Worked around a bug in popular connection pools
    New @SelectPrimitive annotation for SELECT COUNT and SELECT MAX methods
    New TransactionalQuery interface for transaction support (finally)
    QueryTool.createQueryImplementation methods are now deprecated in favor of "getQuery"
    New hand-written ant script (runs without Netbeans)
    Started work on some JUnit tests to get ready for the API freeze
    Column names are now treated as case in-sensitive
    Dates are now set as a TIMESTAMP or DATE rather than an Object
Version 0.7-beta (2007-02-22)
    Added the TypeMapper interface and moved all "primitive" mapping into the EoD SQL code.
    Fixed a massive bug that caused NullPointers when trying to use unknown return types (instead of decent exceptions).
    Added DataIterator to the list of known return types (it was there, but wasn't usable).
    Added new "getQuery" convenience methods to QueryTool, createQueryImplementation will probably be deprecated
Version 0.6-beta (2007-02-06)
    Added InvalidQueryException to replace IllegalArgumentException's throw by QueryTool
    Added InvalidDataTypeException to augment InvalidQueryException when returning an invalid data-type
    Added the DataIterator interfact which is a connected, forward-only sibling to DataSet
    Added "rubberstamp" to the @Select annotation for DataIterator returning methods
Version 0.5-beta (2007-01-24)
    Added more pool-friendly Query implementations the can be kept as field-variables and don't need to be closed
    Added the QueryTool.getDefaultDataSource which helps when you mix EoDSQL and your own SQL
    Fixed a bug in the ConnectedDataSet$IteraterImpl (again)
    Fixed a bug in the array allocation for @Select methods that return arrays